Building a symbol table

Symbol Table Specs:
Store as an object with different attributes ie. a = { 'PP':, 'cur_offset':, 'cur_scope': }

Symbol Table Entry Spec:
Lexeme of variables and functions ---------- Done
Types of variables and functions
sizes of variables
offsets of variables ---------- Done

Construction of LST AND GST:
GST to be defined __init__ function ---------- Done
CST to be defined __init__ function ---------- Done
Updates in current symbol table:
    On lbrace: 
        1) push scope done by lexer ---------- Done
        2) create new symbol table and link it with CST ---------- Done
        3) make the new symbol table as CST ---------- Done

    On rbrace:
        1) pop scope done by lexer ---------- Done
        2) if empty:
            delete the current symbol table ---------- Done
            remove the entry from the parent ---------- Done
        3) make the parent of CST as CST  ---------- Done

    Function_definition:
        1) create new symbol table and link it to parent and set it as CST

    Doubt: How to handle L attributed grammar in bottom up parsing

Functionalites of symbol table:
    addentry:
    removeetry:
    lookupentry:

Scope Handling
    To be done with symbol table
    Handling each function call as a new symbol table and new scope
    Handling each { '''some code''' } as a new scope and symbol table

/**********************************************************************************************/
Code for type checking
    Wrting the code of type checking
/**********************************************************************************************/

AST Construction

Operator Disambiguation:
    Use attributes
    Set priority order among the different types( ie char int float double )
    Check the type of each child, and assign type of operator to be the highest of the children

Typecasting to be done in 
    Expressions
        If the type of any child does not match with the operator type then add a type cast node (operator type) to the child
    Function Arguments
        Keep the input arg list, and check the type of each argument with list
    Return Values
    Think of more

Errors Handling
    Make of all possible error
    Assign type error in code
    handle the type of error while printing

    Context free errors:
        Keep the count variable for function calls and arrays
    Think of other possible ways
